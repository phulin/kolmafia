$(function() {
	function GetStorage(elem) {
		// TODO:  Use KoL storage?  I don't know how that works.  For now just use HTML5 localStorage if it exists
		if (localStorage) {
			return localStorage.getItem('schik-combatfilter-' + elem) || '';
		}
		return '';
	}
	function SetStorage(elem, value) {
		if (localStorage) {
			localStorage.setItem('schik-combatfilter-' + elem, value);
		}
	}
	function AddFilter($div) {
		var $in1 = $('<input>')
			.addClass('buttoned')
			.attr({type: 'text'})
			.css({'width': '100%', 'margin': '0px','padding-right':'16px'});
		$div.prepend($in1);

		$in1.wrap('<div class="filter" />')
			.after($('<span class="xbutton" />'));

		$('.xbutton', $div).css({
			'position':'absolute',
			'display': 'block',
			'top': '4px',
			'right': '0px',
			'width': '16px',
			'height': '16px',
			'background': 'url("http://cdn.sstatic.net/stackoverflow/img/sprites.png?v=4") 0 -690px',
			'cursor': 'pointer'
		}).click(function() {
			$(this).prev('input').val('').triggerHandler('input');
		});

		var $input = $div.find('input');
		$input.keydown(function(ev) {
			// Make global keyhandlers (like #s for combat actions) not fire if you're focused
			// on the filter textbox
			ev.stopPropagation();
			ev.stopImmediatePropagation();
		}).keyup(function(ev) {
			ev.stopPropagation();
			ev.stopImmediatePropagation();
			if (ev.which == 27) {
				// ESC.  Clear the text field.
				$(this).val('').triggerHandler('input');
				ev.preventDefault();
			}
		}).bind('input', (function(ev) {
			var text = $(this).val();
			SetStorage($div.attr('id'), text);

			// This alternative regex is a really loose match, requiring the given letters in order
			// but with anything between them. (i.e. divpop would match a divine champagne popper)
			var looseRegex = false,
				regexText = '';
			if (looseRegex) {
				regexText = '.*';
				for (var i = 0, len = text.length; i < len; i++) {
					regexText += text[i] + '.*';
				}
			} else {
				regexText = '.*' + text + '.*';
			}
			var regex = new RegExp(regexText, 'i');
			$.each($div.children('a'), function(i, skill) {
				var el = $(skill).children('span').text();
				$(skill).css('display', regex.test(el) ? 'block' : 'none');
			});
			$input.next('.xbutton').css('display', text === '' ? 'none' : 'block');
		}));
		$input.val(GetStorage($div.attr('id')));

		// The menu is generated by javascript.  This timeout ensures that the menu items
		// are generated before we apply the previous filter.
		setTimeout(function() {
			$input.triggerHandler('input');
		}, 10);

	}

	var $skills = $("#skillmenu"),
		$items = $("#itemsmenu");
	$skills.length && AddFilter($skills);
	$items.length && AddFilter($items);

	$('#items').click(function() {
		setTimeout(function() {
			$items.find('input').focus().select();
		}, 10);
	});
	$('#skills').click(function() {
		setTimeout(function() {
			$skills.find('input').focus().select();
		}, 10);
	});

});
